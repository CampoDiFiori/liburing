/* automatically generated by rust-bindgen 0.69.1 */

#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
#[repr(C)]
pub struct __BindgenUnionField<T>(::std::marker::PhantomData<T>);
impl<T> __BindgenUnionField<T> {
    #[inline]
    pub const fn new() -> Self {
        __BindgenUnionField(::std::marker::PhantomData)
    }
    #[inline]
    pub unsafe fn as_ref(&self) -> &T {
        ::std::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_mut(&mut self) -> &mut T {
        ::std::mem::transmute(self)
    }
}
impl<T> ::std::default::Default for __BindgenUnionField<T> {
    #[inline]
    fn default() -> Self {
        Self::new()
    }
}
impl<T> ::std::clone::Clone for __BindgenUnionField<T> {
    #[inline]
    fn clone(&self) -> Self {
        *self
    }
}
impl<T> ::std::marker::Copy for __BindgenUnionField<T> {}
impl<T> ::std::fmt::Debug for __BindgenUnionField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__BindgenUnionField")
    }
}
impl<T> ::std::hash::Hash for __BindgenUnionField<T> {
    fn hash<H: ::std::hash::Hasher>(&self, _state: &mut H) {}
}
impl<T> ::std::cmp::PartialEq for __BindgenUnionField<T> {
    fn eq(&self, _other: &__BindgenUnionField<T>) -> bool {
        true
    }
}
impl<T> ::std::cmp::Eq for __BindgenUnionField<T> {}
pub const IORING_FILE_INDEX_ALLOC: i32 = -1;
pub const IORING_SETUP_IOPOLL: u32 = 1;
pub const IORING_SETUP_SQPOLL: u32 = 2;
pub const IORING_SETUP_SQ_AFF: u32 = 4;
pub const IORING_SETUP_CQSIZE: u32 = 8;
pub const IORING_SETUP_CLAMP: u32 = 16;
pub const IORING_SETUP_ATTACH_WQ: u32 = 32;
pub const IORING_SETUP_R_DISABLED: u32 = 64;
pub const IORING_SETUP_SUBMIT_ALL: u32 = 128;
pub const IORING_SETUP_COOP_TASKRUN: u32 = 256;
pub const IORING_SETUP_TASKRUN_FLAG: u32 = 512;
pub const IORING_SETUP_SQE128: u32 = 1024;
pub const IORING_SETUP_CQE32: u32 = 2048;
pub const IORING_SETUP_SINGLE_ISSUER: u32 = 4096;
pub const IORING_SETUP_DEFER_TASKRUN: u32 = 8192;
pub const IORING_SETUP_NO_MMAP: u32 = 16384;
pub const IORING_SETUP_REGISTERED_FD_ONLY: u32 = 32768;
pub const IORING_SETUP_NO_SQARRAY: u32 = 65536;
pub const IORING_URING_CMD_FIXED: u32 = 1;
pub const IORING_FSYNC_DATASYNC: u32 = 1;
pub const IORING_TIMEOUT_ABS: u32 = 1;
pub const IORING_TIMEOUT_UPDATE: u32 = 2;
pub const IORING_TIMEOUT_BOOTTIME: u32 = 4;
pub const IORING_TIMEOUT_REALTIME: u32 = 8;
pub const IORING_LINK_TIMEOUT_UPDATE: u32 = 16;
pub const IORING_TIMEOUT_ETIME_SUCCESS: u32 = 32;
pub const IORING_TIMEOUT_MULTISHOT: u32 = 64;
pub const IORING_TIMEOUT_CLOCK_MASK: u32 = 12;
pub const IORING_TIMEOUT_UPDATE_MASK: u32 = 18;
pub const IORING_POLL_ADD_MULTI: u32 = 1;
pub const IORING_POLL_UPDATE_EVENTS: u32 = 2;
pub const IORING_POLL_UPDATE_USER_DATA: u32 = 4;
pub const IORING_POLL_ADD_LEVEL: u32 = 8;
pub const IORING_ASYNC_CANCEL_ALL: u32 = 1;
pub const IORING_ASYNC_CANCEL_FD: u32 = 2;
pub const IORING_ASYNC_CANCEL_ANY: u32 = 4;
pub const IORING_ASYNC_CANCEL_FD_FIXED: u32 = 8;
pub const IORING_RECVSEND_POLL_FIRST: u32 = 1;
pub const IORING_RECV_MULTISHOT: u32 = 2;
pub const IORING_RECVSEND_FIXED_BUF: u32 = 4;
pub const IORING_SEND_ZC_REPORT_USAGE: u32 = 8;
pub const IORING_NOTIF_USAGE_ZC_COPIED: u32 = 2147483648;
pub const IORING_ACCEPT_MULTISHOT: u32 = 1;
pub const IORING_MSG_RING_CQE_SKIP: u32 = 1;
pub const IORING_MSG_RING_FLAGS_PASS: u32 = 2;
pub const IORING_CQE_F_BUFFER: u32 = 1;
pub const IORING_CQE_F_MORE: u32 = 2;
pub const IORING_CQE_F_SOCK_NONEMPTY: u32 = 4;
pub const IORING_CQE_F_NOTIF: u32 = 8;
pub const IORING_OFF_SQ_RING: u32 = 0;
pub const IORING_OFF_CQ_RING: u32 = 134217728;
pub const IORING_OFF_SQES: u32 = 268435456;
pub const IORING_OFF_PBUF_RING: u32 = 2147483648;
pub const IORING_OFF_PBUF_SHIFT: u32 = 16;
pub const IORING_OFF_MMAP_MASK: u32 = 4160749568;
pub const IORING_SQ_NEED_WAKEUP: u32 = 1;
pub const IORING_SQ_CQ_OVERFLOW: u32 = 2;
pub const IORING_SQ_TASKRUN: u32 = 4;
pub const IORING_CQ_EVENTFD_DISABLED: u32 = 1;
pub const IORING_ENTER_GETEVENTS: u32 = 1;
pub const IORING_ENTER_SQ_WAKEUP: u32 = 2;
pub const IORING_ENTER_SQ_WAIT: u32 = 4;
pub const IORING_ENTER_EXT_ARG: u32 = 8;
pub const IORING_ENTER_REGISTERED_RING: u32 = 16;
pub const IORING_FEAT_SINGLE_MMAP: u32 = 1;
pub const IORING_FEAT_NODROP: u32 = 2;
pub const IORING_FEAT_SUBMIT_STABLE: u32 = 4;
pub const IORING_FEAT_RW_CUR_POS: u32 = 8;
pub const IORING_FEAT_CUR_PERSONALITY: u32 = 16;
pub const IORING_FEAT_FAST_POLL: u32 = 32;
pub const IORING_FEAT_POLL_32BITS: u32 = 64;
pub const IORING_FEAT_SQPOLL_NONFIXED: u32 = 128;
pub const IORING_FEAT_EXT_ARG: u32 = 256;
pub const IORING_FEAT_NATIVE_WORKERS: u32 = 512;
pub const IORING_FEAT_RSRC_TAGS: u32 = 1024;
pub const IORING_FEAT_CQE_SKIP: u32 = 2048;
pub const IORING_FEAT_LINKED_FILE: u32 = 4096;
pub const IORING_FEAT_REG_REG_RING: u32 = 8192;
pub const IORING_RSRC_REGISTER_SPARSE: u32 = 1;
pub const IORING_REGISTER_FILES_SKIP: i32 = -2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iovec {
    pub iov_base: *mut ::std::os::raw::c_void,
    pub iov_len: usize,
}
#[test]
fn bindgen_test_layout_iovec() {
    const UNINIT: ::std::mem::MaybeUninit<iovec> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iovec>(),
        16usize,
        concat!("Size of: ", stringify!(iovec))
    );
    assert_eq!(
        ::std::mem::align_of::<iovec>(),
        8usize,
        concat!("Alignment of ", stringify!(iovec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iov_base) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iovec),
            "::",
            stringify!(iov_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iov_len) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iovec),
            "::",
            stringify!(iov_len)
        )
    );
}
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __off_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
pub type __clock_t = ::std::os::raw::c_long;
pub type __id_t = ::std::os::raw::c_uint;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type mode_t = __mode_t;
pub type off_t = __off_t;
pub type id_t = __id_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___sigset_t() {
    const UNINIT: ::std::mem::MaybeUninit<__sigset_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__sigset_t>(),
        128usize,
        concat!("Size of: ", stringify!(__sigset_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigset_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigset_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigset_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type sigset_t = __sigset_t;
pub type socklen_t = __socklen_t;
pub type sa_family_t = ::std::os::raw::c_ushort;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr {
    pub sa_family: sa_family_t,
    pub sa_data: [::std::os::raw::c_char; 14usize],
}
#[test]
fn bindgen_test_layout_sockaddr() {
    const UNINIT: ::std::mem::MaybeUninit<sockaddr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sockaddr>(),
        16usize,
        concat!("Size of: ", stringify!(sockaddr))
    );
    assert_eq!(
        ::std::mem::align_of::<sockaddr>(),
        2usize,
        concat!("Alignment of ", stringify!(sockaddr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sa_family) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr),
            "::",
            stringify!(sa_family)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sa_data) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr),
            "::",
            stringify!(sa_data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct msghdr {
    pub msg_name: *mut ::std::os::raw::c_void,
    pub msg_namelen: socklen_t,
    pub msg_iov: *mut iovec,
    pub msg_iovlen: usize,
    pub msg_control: *mut ::std::os::raw::c_void,
    pub msg_controllen: usize,
    pub msg_flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_msghdr() {
    const UNINIT: ::std::mem::MaybeUninit<msghdr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<msghdr>(),
        56usize,
        concat!("Size of: ", stringify!(msghdr))
    );
    assert_eq!(
        ::std::mem::align_of::<msghdr>(),
        8usize,
        concat!("Alignment of ", stringify!(msghdr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg_name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg_namelen) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_namelen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg_iov) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_iov)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg_iovlen) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_iovlen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg_control) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_control)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg_controllen) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_controllen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg_flags) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_flags)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct cmsghdr {
    pub cmsg_len: usize,
    pub cmsg_level: ::std::os::raw::c_int,
    pub cmsg_type: ::std::os::raw::c_int,
    pub __cmsg_data: __IncompleteArrayField<::std::os::raw::c_uchar>,
}
#[test]
fn bindgen_test_layout_cmsghdr() {
    const UNINIT: ::std::mem::MaybeUninit<cmsghdr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cmsghdr>(),
        16usize,
        concat!("Size of: ", stringify!(cmsghdr))
    );
    assert_eq!(
        ::std::mem::align_of::<cmsghdr>(),
        8usize,
        concat!("Alignment of ", stringify!(cmsghdr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmsg_len) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsghdr),
            "::",
            stringify!(cmsg_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmsg_level) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsghdr),
            "::",
            stringify!(cmsg_level)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmsg_type) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsghdr),
            "::",
            stringify!(cmsg_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__cmsg_data) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsghdr),
            "::",
            stringify!(__cmsg_data)
        )
    );
}
pub type __kernel_time64_t = ::std::os::raw::c_longlong;
pub type __u8 = ::std::os::raw::c_uchar;
pub type __u16 = ::std::os::raw::c_ushort;
pub type __s32 = ::std::os::raw::c_int;
pub type __u32 = ::std::os::raw::c_uint;
pub type __s64 = ::std::os::raw::c_longlong;
pub type __u64 = ::std::os::raw::c_ulonglong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct statx_timestamp {
    pub tv_sec: __s64,
    pub tv_nsec: __u32,
    pub __reserved: __s32,
}
#[test]
fn bindgen_test_layout_statx_timestamp() {
    const UNINIT: ::std::mem::MaybeUninit<statx_timestamp> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<statx_timestamp>(),
        16usize,
        concat!("Size of: ", stringify!(statx_timestamp))
    );
    assert_eq!(
        ::std::mem::align_of::<statx_timestamp>(),
        8usize,
        concat!("Alignment of ", stringify!(statx_timestamp))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_sec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(statx_timestamp),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_nsec) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(statx_timestamp),
            "::",
            stringify!(tv_nsec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__reserved) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(statx_timestamp),
            "::",
            stringify!(__reserved)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct statx {
    pub stx_mask: __u32,
    pub stx_blksize: __u32,
    pub stx_attributes: __u64,
    pub stx_nlink: __u32,
    pub stx_uid: __u32,
    pub stx_gid: __u32,
    pub stx_mode: __u16,
    pub __spare0: [__u16; 1usize],
    pub stx_ino: __u64,
    pub stx_size: __u64,
    pub stx_blocks: __u64,
    pub stx_attributes_mask: __u64,
    pub stx_atime: statx_timestamp,
    pub stx_btime: statx_timestamp,
    pub stx_ctime: statx_timestamp,
    pub stx_mtime: statx_timestamp,
    pub stx_rdev_major: __u32,
    pub stx_rdev_minor: __u32,
    pub stx_dev_major: __u32,
    pub stx_dev_minor: __u32,
    pub stx_mnt_id: __u64,
    pub stx_dio_mem_align: __u32,
    pub stx_dio_offset_align: __u32,
    pub __spare3: [__u64; 12usize],
}
#[test]
fn bindgen_test_layout_statx() {
    const UNINIT: ::std::mem::MaybeUninit<statx> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<statx>(),
        256usize,
        concat!("Size of: ", stringify!(statx))
    );
    assert_eq!(
        ::std::mem::align_of::<statx>(),
        8usize,
        concat!("Alignment of ", stringify!(statx))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stx_mask) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(statx),
            "::",
            stringify!(stx_mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stx_blksize) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(statx),
            "::",
            stringify!(stx_blksize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stx_attributes) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(statx),
            "::",
            stringify!(stx_attributes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stx_nlink) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(statx),
            "::",
            stringify!(stx_nlink)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stx_uid) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(statx),
            "::",
            stringify!(stx_uid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stx_gid) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(statx),
            "::",
            stringify!(stx_gid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stx_mode) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(statx),
            "::",
            stringify!(stx_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__spare0) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(statx),
            "::",
            stringify!(__spare0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stx_ino) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(statx),
            "::",
            stringify!(stx_ino)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stx_size) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(statx),
            "::",
            stringify!(stx_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stx_blocks) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(statx),
            "::",
            stringify!(stx_blocks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stx_attributes_mask) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(statx),
            "::",
            stringify!(stx_attributes_mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stx_atime) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(statx),
            "::",
            stringify!(stx_atime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stx_btime) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(statx),
            "::",
            stringify!(stx_btime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stx_ctime) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(statx),
            "::",
            stringify!(stx_ctime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stx_mtime) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(statx),
            "::",
            stringify!(stx_mtime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stx_rdev_major) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(statx),
            "::",
            stringify!(stx_rdev_major)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stx_rdev_minor) as usize - ptr as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(statx),
            "::",
            stringify!(stx_rdev_minor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stx_dev_major) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(statx),
            "::",
            stringify!(stx_dev_major)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stx_dev_minor) as usize - ptr as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(statx),
            "::",
            stringify!(stx_dev_minor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stx_mnt_id) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(statx),
            "::",
            stringify!(stx_mnt_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stx_dio_mem_align) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(statx),
            "::",
            stringify!(stx_dio_mem_align)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stx_dio_offset_align) as usize - ptr as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(statx),
            "::",
            stringify!(stx_dio_offset_align)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__spare3) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(statx),
            "::",
            stringify!(__spare3)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sigval {
    pub sival_int: ::std::os::raw::c_int,
    pub sival_ptr: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_sigval() {
    const UNINIT: ::std::mem::MaybeUninit<sigval> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sigval>(),
        8usize,
        concat!("Size of: ", stringify!(sigval))
    );
    assert_eq!(
        ::std::mem::align_of::<sigval>(),
        8usize,
        concat!("Alignment of ", stringify!(sigval))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sival_int) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigval),
            "::",
            stringify!(sival_int)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sival_ptr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigval),
            "::",
            stringify!(sival_ptr)
        )
    );
}
pub type __sigval_t = sigval;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct siginfo_t {
    pub si_signo: ::std::os::raw::c_int,
    pub si_errno: ::std::os::raw::c_int,
    pub si_code: ::std::os::raw::c_int,
    pub __pad0: ::std::os::raw::c_int,
    pub _sifields: siginfo_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union siginfo_t__bindgen_ty_1 {
    pub _pad: [::std::os::raw::c_int; 28usize],
    pub _kill: siginfo_t__bindgen_ty_1__bindgen_ty_1,
    pub _timer: siginfo_t__bindgen_ty_1__bindgen_ty_2,
    pub _rt: siginfo_t__bindgen_ty_1__bindgen_ty_3,
    pub _sigchld: siginfo_t__bindgen_ty_1__bindgen_ty_4,
    pub _sigfault: siginfo_t__bindgen_ty_1__bindgen_ty_5,
    pub _sigpoll: siginfo_t__bindgen_ty_1__bindgen_ty_6,
    pub _sigsys: siginfo_t__bindgen_ty_1__bindgen_ty_7,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_1 {
    pub si_pid: __pid_t,
    pub si_uid: __uid_t,
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<siginfo_t__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_pid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(si_pid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_uid) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(si_uid)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_2 {
    pub si_tid: ::std::os::raw::c_int,
    pub si_overrun: ::std::os::raw::c_int,
    pub si_sigval: __sigval_t,
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<siginfo_t__bindgen_ty_1__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_2>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_tid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(si_tid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_overrun) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(si_overrun)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_sigval) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(si_sigval)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_3 {
    pub si_pid: __pid_t,
    pub si_uid: __uid_t,
    pub si_sigval: __sigval_t,
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<siginfo_t__bindgen_ty_1__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_3>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_3>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_pid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(si_pid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_uid) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(si_uid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_sigval) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(si_sigval)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_4 {
    pub si_pid: __pid_t,
    pub si_uid: __uid_t,
    pub si_status: ::std::os::raw::c_int,
    pub si_utime: __clock_t,
    pub si_stime: __clock_t,
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_4() {
    const UNINIT: ::std::mem::MaybeUninit<siginfo_t__bindgen_ty_1__bindgen_ty_4> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_4>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_4>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_pid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(si_pid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_uid) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(si_uid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_status) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(si_status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_utime) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(si_utime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_stime) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(si_stime)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_5 {
    pub si_addr: *mut ::std::os::raw::c_void,
    pub si_addr_lsb: ::std::os::raw::c_short,
    pub _bounds: siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1 {
    pub _addr_bnd: siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1,
    pub _pkey: __uint32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1 {
    pub _lower: *mut ::std::os::raw::c_void,
    pub _upper: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<
        siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._lower) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(_lower)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._upper) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(_upper)
        )
    );
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._addr_bnd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1),
            "::",
            stringify!(_addr_bnd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._pkey) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1),
            "::",
            stringify!(_pkey)
        )
    );
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_5() {
    const UNINIT: ::std::mem::MaybeUninit<siginfo_t__bindgen_ty_1__bindgen_ty_5> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_5>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_5>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_addr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(si_addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_addr_lsb) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(si_addr_lsb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._bounds) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(_bounds)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_6 {
    pub si_band: ::std::os::raw::c_long,
    pub si_fd: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_6() {
    const UNINIT: ::std::mem::MaybeUninit<siginfo_t__bindgen_ty_1__bindgen_ty_6> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_6>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_6)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_6>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_band) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_6),
            "::",
            stringify!(si_band)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_fd) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_6),
            "::",
            stringify!(si_fd)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_7 {
    pub _call_addr: *mut ::std::os::raw::c_void,
    pub _syscall: ::std::os::raw::c_int,
    pub _arch: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_7() {
    const UNINIT: ::std::mem::MaybeUninit<siginfo_t__bindgen_ty_1__bindgen_ty_7> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_7>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_7)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_7>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._call_addr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_7),
            "::",
            stringify!(_call_addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._syscall) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_7),
            "::",
            stringify!(_syscall)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._arch) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_7),
            "::",
            stringify!(_arch)
        )
    );
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<siginfo_t__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<siginfo_t__bindgen_ty_1>(),
        112usize,
        concat!("Size of: ", stringify!(siginfo_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(siginfo_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._pad) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1),
            "::",
            stringify!(_pad)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._kill) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1),
            "::",
            stringify!(_kill)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._timer) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1),
            "::",
            stringify!(_timer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._rt) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1),
            "::",
            stringify!(_rt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._sigchld) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1),
            "::",
            stringify!(_sigchld)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._sigfault) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1),
            "::",
            stringify!(_sigfault)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._sigpoll) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1),
            "::",
            stringify!(_sigpoll)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._sigsys) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1),
            "::",
            stringify!(_sigsys)
        )
    );
}
#[test]
fn bindgen_test_layout_siginfo_t() {
    const UNINIT: ::std::mem::MaybeUninit<siginfo_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<siginfo_t>(),
        128usize,
        concat!("Size of: ", stringify!(siginfo_t))
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t>(),
        8usize,
        concat!("Alignment of ", stringify!(siginfo_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_signo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t),
            "::",
            stringify!(si_signo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_errno) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t),
            "::",
            stringify!(si_errno)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_code) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t),
            "::",
            stringify!(si_code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad0) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t),
            "::",
            stringify!(__pad0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._sifields) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t),
            "::",
            stringify!(_sifields)
        )
    );
}
pub type __cpu_mask = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cpu_set_t {
    pub __bits: [__cpu_mask; 16usize],
}
#[test]
fn bindgen_test_layout_cpu_set_t() {
    const UNINIT: ::std::mem::MaybeUninit<cpu_set_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cpu_set_t>(),
        128usize,
        concat!("Size of: ", stringify!(cpu_set_t))
    );
    assert_eq!(
        ::std::mem::align_of::<cpu_set_t>(),
        8usize,
        concat!("Alignment of ", stringify!(cpu_set_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__bits) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cpu_set_t),
            "::",
            stringify!(__bits)
        )
    );
}
pub const idtype_t_P_ALL: idtype_t = 0;
pub const idtype_t_P_PID: idtype_t = 1;
pub const idtype_t_P_PGID: idtype_t = 2;
pub const idtype_t_P_PIDFD: idtype_t = 3;
pub type idtype_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_timespec {
    pub tv_sec: __kernel_time64_t,
    pub tv_nsec: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout___kernel_timespec() {
    const UNINIT: ::std::mem::MaybeUninit<__kernel_timespec> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__kernel_timespec>(),
        16usize,
        concat!("Size of: ", stringify!(__kernel_timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<__kernel_timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(__kernel_timespec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_sec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__kernel_timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_nsec) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__kernel_timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct open_how {
    pub flags: __u64,
    pub mode: __u64,
    pub resolve: __u64,
}
#[test]
fn bindgen_test_layout_open_how() {
    const UNINIT: ::std::mem::MaybeUninit<open_how> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<open_how>(),
        24usize,
        concat!("Size of: ", stringify!(open_how))
    );
    assert_eq!(
        ::std::mem::align_of::<open_how>(),
        8usize,
        concat!("Alignment of ", stringify!(open_how))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(open_how),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mode) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(open_how),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resolve) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(open_how),
            "::",
            stringify!(resolve)
        )
    );
}
pub type __kernel_rwf_t = ::std::os::raw::c_int;
#[repr(C)]
pub struct io_uring_sqe {
    pub opcode: __u8,
    pub flags: __u8,
    pub ioprio: __u16,
    pub fd: __s32,
    pub __bindgen_anon_1: io_uring_sqe__bindgen_ty_1,
    pub __bindgen_anon_2: io_uring_sqe__bindgen_ty_2,
    pub len: __u32,
    pub __bindgen_anon_3: io_uring_sqe__bindgen_ty_3,
    pub user_data: __u64,
    pub __bindgen_anon_4: io_uring_sqe__bindgen_ty_4,
    pub personality: __u16,
    pub __bindgen_anon_5: io_uring_sqe__bindgen_ty_5,
    pub __bindgen_anon_6: io_uring_sqe__bindgen_ty_6,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union io_uring_sqe__bindgen_ty_1 {
    pub off: __u64,
    pub addr2: __u64,
    pub __bindgen_anon_1: io_uring_sqe__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct io_uring_sqe__bindgen_ty_1__bindgen_ty_1 {
    pub cmd_op: __u32,
    pub __pad1: __u32,
}
#[test]
fn bindgen_test_layout_io_uring_sqe__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<io_uring_sqe__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<io_uring_sqe__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(io_uring_sqe__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<io_uring_sqe__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(io_uring_sqe__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmd_op) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_sqe__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(cmd_op)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad1) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_sqe__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__pad1)
        )
    );
}
#[test]
fn bindgen_test_layout_io_uring_sqe__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<io_uring_sqe__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<io_uring_sqe__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(io_uring_sqe__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<io_uring_sqe__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(io_uring_sqe__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).off) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_sqe__bindgen_ty_1),
            "::",
            stringify!(off)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr2) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_sqe__bindgen_ty_1),
            "::",
            stringify!(addr2)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union io_uring_sqe__bindgen_ty_2 {
    pub addr: __u64,
    pub splice_off_in: __u64,
    pub __bindgen_anon_1: io_uring_sqe__bindgen_ty_2__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct io_uring_sqe__bindgen_ty_2__bindgen_ty_1 {
    pub level: __u32,
    pub optname: __u32,
}
#[test]
fn bindgen_test_layout_io_uring_sqe__bindgen_ty_2__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<io_uring_sqe__bindgen_ty_2__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<io_uring_sqe__bindgen_ty_2__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(io_uring_sqe__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<io_uring_sqe__bindgen_ty_2__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(io_uring_sqe__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).level) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_sqe__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(level)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).optname) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_sqe__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(optname)
        )
    );
}
#[test]
fn bindgen_test_layout_io_uring_sqe__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<io_uring_sqe__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<io_uring_sqe__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(io_uring_sqe__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<io_uring_sqe__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(io_uring_sqe__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_sqe__bindgen_ty_2),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).splice_off_in) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_sqe__bindgen_ty_2),
            "::",
            stringify!(splice_off_in)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union io_uring_sqe__bindgen_ty_3 {
    pub rw_flags: __kernel_rwf_t,
    pub fsync_flags: __u32,
    pub poll_events: __u16,
    pub poll32_events: __u32,
    pub sync_range_flags: __u32,
    pub msg_flags: __u32,
    pub timeout_flags: __u32,
    pub accept_flags: __u32,
    pub cancel_flags: __u32,
    pub open_flags: __u32,
    pub statx_flags: __u32,
    pub fadvise_advice: __u32,
    pub splice_flags: __u32,
    pub rename_flags: __u32,
    pub unlink_flags: __u32,
    pub hardlink_flags: __u32,
    pub xattr_flags: __u32,
    pub msg_ring_flags: __u32,
    pub uring_cmd_flags: __u32,
    pub waitid_flags: __u32,
    pub futex_flags: __u32,
}
#[test]
fn bindgen_test_layout_io_uring_sqe__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<io_uring_sqe__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<io_uring_sqe__bindgen_ty_3>(),
        4usize,
        concat!("Size of: ", stringify!(io_uring_sqe__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<io_uring_sqe__bindgen_ty_3>(),
        4usize,
        concat!("Alignment of ", stringify!(io_uring_sqe__bindgen_ty_3))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rw_flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_sqe__bindgen_ty_3),
            "::",
            stringify!(rw_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fsync_flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_sqe__bindgen_ty_3),
            "::",
            stringify!(fsync_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).poll_events) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_sqe__bindgen_ty_3),
            "::",
            stringify!(poll_events)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).poll32_events) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_sqe__bindgen_ty_3),
            "::",
            stringify!(poll32_events)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sync_range_flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_sqe__bindgen_ty_3),
            "::",
            stringify!(sync_range_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg_flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_sqe__bindgen_ty_3),
            "::",
            stringify!(msg_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timeout_flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_sqe__bindgen_ty_3),
            "::",
            stringify!(timeout_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).accept_flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_sqe__bindgen_ty_3),
            "::",
            stringify!(accept_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cancel_flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_sqe__bindgen_ty_3),
            "::",
            stringify!(cancel_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).open_flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_sqe__bindgen_ty_3),
            "::",
            stringify!(open_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).statx_flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_sqe__bindgen_ty_3),
            "::",
            stringify!(statx_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fadvise_advice) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_sqe__bindgen_ty_3),
            "::",
            stringify!(fadvise_advice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).splice_flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_sqe__bindgen_ty_3),
            "::",
            stringify!(splice_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rename_flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_sqe__bindgen_ty_3),
            "::",
            stringify!(rename_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unlink_flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_sqe__bindgen_ty_3),
            "::",
            stringify!(unlink_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hardlink_flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_sqe__bindgen_ty_3),
            "::",
            stringify!(hardlink_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xattr_flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_sqe__bindgen_ty_3),
            "::",
            stringify!(xattr_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg_ring_flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_sqe__bindgen_ty_3),
            "::",
            stringify!(msg_ring_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uring_cmd_flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_sqe__bindgen_ty_3),
            "::",
            stringify!(uring_cmd_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).waitid_flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_sqe__bindgen_ty_3),
            "::",
            stringify!(waitid_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).futex_flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_sqe__bindgen_ty_3),
            "::",
            stringify!(futex_flags)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub union io_uring_sqe__bindgen_ty_4 {
    pub buf_index: __u16,
    pub buf_group: __u16,
}
#[test]
fn bindgen_test_layout_io_uring_sqe__bindgen_ty_4() {
    const UNINIT: ::std::mem::MaybeUninit<io_uring_sqe__bindgen_ty_4> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<io_uring_sqe__bindgen_ty_4>(),
        2usize,
        concat!("Size of: ", stringify!(io_uring_sqe__bindgen_ty_4))
    );
    assert_eq!(
        ::std::mem::align_of::<io_uring_sqe__bindgen_ty_4>(),
        1usize,
        concat!("Alignment of ", stringify!(io_uring_sqe__bindgen_ty_4))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buf_index) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_sqe__bindgen_ty_4),
            "::",
            stringify!(buf_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buf_group) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_sqe__bindgen_ty_4),
            "::",
            stringify!(buf_group)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union io_uring_sqe__bindgen_ty_5 {
    pub splice_fd_in: __s32,
    pub file_index: __u32,
    pub optlen: __u32,
    pub __bindgen_anon_1: io_uring_sqe__bindgen_ty_5__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct io_uring_sqe__bindgen_ty_5__bindgen_ty_1 {
    pub addr_len: __u16,
    pub __pad3: [__u16; 1usize],
}
#[test]
fn bindgen_test_layout_io_uring_sqe__bindgen_ty_5__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<io_uring_sqe__bindgen_ty_5__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<io_uring_sqe__bindgen_ty_5__bindgen_ty_1>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(io_uring_sqe__bindgen_ty_5__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<io_uring_sqe__bindgen_ty_5__bindgen_ty_1>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(io_uring_sqe__bindgen_ty_5__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr_len) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_sqe__bindgen_ty_5__bindgen_ty_1),
            "::",
            stringify!(addr_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad3) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_sqe__bindgen_ty_5__bindgen_ty_1),
            "::",
            stringify!(__pad3)
        )
    );
}
#[test]
fn bindgen_test_layout_io_uring_sqe__bindgen_ty_5() {
    const UNINIT: ::std::mem::MaybeUninit<io_uring_sqe__bindgen_ty_5> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<io_uring_sqe__bindgen_ty_5>(),
        4usize,
        concat!("Size of: ", stringify!(io_uring_sqe__bindgen_ty_5))
    );
    assert_eq!(
        ::std::mem::align_of::<io_uring_sqe__bindgen_ty_5>(),
        4usize,
        concat!("Alignment of ", stringify!(io_uring_sqe__bindgen_ty_5))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).splice_fd_in) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_sqe__bindgen_ty_5),
            "::",
            stringify!(splice_fd_in)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).file_index) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_sqe__bindgen_ty_5),
            "::",
            stringify!(file_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).optlen) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_sqe__bindgen_ty_5),
            "::",
            stringify!(optlen)
        )
    );
}
#[repr(C)]
pub struct io_uring_sqe__bindgen_ty_6 {
    pub __bindgen_anon_1: __BindgenUnionField<io_uring_sqe__bindgen_ty_6__bindgen_ty_1>,
    pub optval: __BindgenUnionField<__u64>,
    pub cmd: __BindgenUnionField<[__u8; 0usize]>,
    pub bindgen_union_field: [u64; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct io_uring_sqe__bindgen_ty_6__bindgen_ty_1 {
    pub addr3: __u64,
    pub __pad2: [__u64; 1usize],
}
#[test]
fn bindgen_test_layout_io_uring_sqe__bindgen_ty_6__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<io_uring_sqe__bindgen_ty_6__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<io_uring_sqe__bindgen_ty_6__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(io_uring_sqe__bindgen_ty_6__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<io_uring_sqe__bindgen_ty_6__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(io_uring_sqe__bindgen_ty_6__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr3) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_sqe__bindgen_ty_6__bindgen_ty_1),
            "::",
            stringify!(addr3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad2) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_sqe__bindgen_ty_6__bindgen_ty_1),
            "::",
            stringify!(__pad2)
        )
    );
}
#[test]
fn bindgen_test_layout_io_uring_sqe__bindgen_ty_6() {
    const UNINIT: ::std::mem::MaybeUninit<io_uring_sqe__bindgen_ty_6> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<io_uring_sqe__bindgen_ty_6>(),
        16usize,
        concat!("Size of: ", stringify!(io_uring_sqe__bindgen_ty_6))
    );
    assert_eq!(
        ::std::mem::align_of::<io_uring_sqe__bindgen_ty_6>(),
        8usize,
        concat!("Alignment of ", stringify!(io_uring_sqe__bindgen_ty_6))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).optval) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_sqe__bindgen_ty_6),
            "::",
            stringify!(optval)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_sqe__bindgen_ty_6),
            "::",
            stringify!(cmd)
        )
    );
}
#[test]
fn bindgen_test_layout_io_uring_sqe() {
    const UNINIT: ::std::mem::MaybeUninit<io_uring_sqe> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<io_uring_sqe>(),
        64usize,
        concat!("Size of: ", stringify!(io_uring_sqe))
    );
    assert_eq!(
        ::std::mem::align_of::<io_uring_sqe>(),
        8usize,
        concat!("Alignment of ", stringify!(io_uring_sqe))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).opcode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_sqe),
            "::",
            stringify!(opcode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_sqe),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ioprio) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_sqe),
            "::",
            stringify!(ioprio)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fd) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_sqe),
            "::",
            stringify!(fd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_sqe),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_data) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_sqe),
            "::",
            stringify!(user_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).personality) as usize - ptr as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_sqe),
            "::",
            stringify!(personality)
        )
    );
}
pub const IOSQE_FIXED_FILE_BIT: _bindgen_ty_18 = 0;
pub const IOSQE_IO_DRAIN_BIT: _bindgen_ty_18 = 1;
pub const IOSQE_IO_LINK_BIT: _bindgen_ty_18 = 2;
pub const IOSQE_IO_HARDLINK_BIT: _bindgen_ty_18 = 3;
pub const IOSQE_ASYNC_BIT: _bindgen_ty_18 = 4;
pub const IOSQE_BUFFER_SELECT_BIT: _bindgen_ty_18 = 5;
pub const IOSQE_CQE_SKIP_SUCCESS_BIT: _bindgen_ty_18 = 6;
pub type _bindgen_ty_18 = ::std::os::raw::c_uint;
pub const io_uring_op_IORING_OP_NOP: io_uring_op = 0;
pub const io_uring_op_IORING_OP_READV: io_uring_op = 1;
pub const io_uring_op_IORING_OP_WRITEV: io_uring_op = 2;
pub const io_uring_op_IORING_OP_FSYNC: io_uring_op = 3;
pub const io_uring_op_IORING_OP_READ_FIXED: io_uring_op = 4;
pub const io_uring_op_IORING_OP_WRITE_FIXED: io_uring_op = 5;
pub const io_uring_op_IORING_OP_POLL_ADD: io_uring_op = 6;
pub const io_uring_op_IORING_OP_POLL_REMOVE: io_uring_op = 7;
pub const io_uring_op_IORING_OP_SYNC_FILE_RANGE: io_uring_op = 8;
pub const io_uring_op_IORING_OP_SENDMSG: io_uring_op = 9;
pub const io_uring_op_IORING_OP_RECVMSG: io_uring_op = 10;
pub const io_uring_op_IORING_OP_TIMEOUT: io_uring_op = 11;
pub const io_uring_op_IORING_OP_TIMEOUT_REMOVE: io_uring_op = 12;
pub const io_uring_op_IORING_OP_ACCEPT: io_uring_op = 13;
pub const io_uring_op_IORING_OP_ASYNC_CANCEL: io_uring_op = 14;
pub const io_uring_op_IORING_OP_LINK_TIMEOUT: io_uring_op = 15;
pub const io_uring_op_IORING_OP_CONNECT: io_uring_op = 16;
pub const io_uring_op_IORING_OP_FALLOCATE: io_uring_op = 17;
pub const io_uring_op_IORING_OP_OPENAT: io_uring_op = 18;
pub const io_uring_op_IORING_OP_CLOSE: io_uring_op = 19;
pub const io_uring_op_IORING_OP_FILES_UPDATE: io_uring_op = 20;
pub const io_uring_op_IORING_OP_STATX: io_uring_op = 21;
pub const io_uring_op_IORING_OP_READ: io_uring_op = 22;
pub const io_uring_op_IORING_OP_WRITE: io_uring_op = 23;
pub const io_uring_op_IORING_OP_FADVISE: io_uring_op = 24;
pub const io_uring_op_IORING_OP_MADVISE: io_uring_op = 25;
pub const io_uring_op_IORING_OP_SEND: io_uring_op = 26;
pub const io_uring_op_IORING_OP_RECV: io_uring_op = 27;
pub const io_uring_op_IORING_OP_OPENAT2: io_uring_op = 28;
pub const io_uring_op_IORING_OP_EPOLL_CTL: io_uring_op = 29;
pub const io_uring_op_IORING_OP_SPLICE: io_uring_op = 30;
pub const io_uring_op_IORING_OP_PROVIDE_BUFFERS: io_uring_op = 31;
pub const io_uring_op_IORING_OP_REMOVE_BUFFERS: io_uring_op = 32;
pub const io_uring_op_IORING_OP_TEE: io_uring_op = 33;
pub const io_uring_op_IORING_OP_SHUTDOWN: io_uring_op = 34;
pub const io_uring_op_IORING_OP_RENAMEAT: io_uring_op = 35;
pub const io_uring_op_IORING_OP_UNLINKAT: io_uring_op = 36;
pub const io_uring_op_IORING_OP_MKDIRAT: io_uring_op = 37;
pub const io_uring_op_IORING_OP_SYMLINKAT: io_uring_op = 38;
pub const io_uring_op_IORING_OP_LINKAT: io_uring_op = 39;
pub const io_uring_op_IORING_OP_MSG_RING: io_uring_op = 40;
pub const io_uring_op_IORING_OP_FSETXATTR: io_uring_op = 41;
pub const io_uring_op_IORING_OP_SETXATTR: io_uring_op = 42;
pub const io_uring_op_IORING_OP_FGETXATTR: io_uring_op = 43;
pub const io_uring_op_IORING_OP_GETXATTR: io_uring_op = 44;
pub const io_uring_op_IORING_OP_SOCKET: io_uring_op = 45;
pub const io_uring_op_IORING_OP_URING_CMD: io_uring_op = 46;
pub const io_uring_op_IORING_OP_SEND_ZC: io_uring_op = 47;
pub const io_uring_op_IORING_OP_SENDMSG_ZC: io_uring_op = 48;
pub const io_uring_op_IORING_OP_READ_MULTISHOT: io_uring_op = 49;
pub const io_uring_op_IORING_OP_WAITID: io_uring_op = 50;
pub const io_uring_op_IORING_OP_FUTEX_WAIT: io_uring_op = 51;
pub const io_uring_op_IORING_OP_FUTEX_WAKE: io_uring_op = 52;
pub const io_uring_op_IORING_OP_FUTEX_WAITV: io_uring_op = 53;
pub const io_uring_op_IORING_OP_LAST: io_uring_op = 54;
pub type io_uring_op = ::std::os::raw::c_uint;
pub const IORING_MSG_DATA: _bindgen_ty_19 = 0;
pub const IORING_MSG_SEND_FD: _bindgen_ty_19 = 1;
pub type _bindgen_ty_19 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug)]
pub struct io_uring_cqe {
    pub user_data: __u64,
    pub res: __s32,
    pub flags: __u32,
    pub big_cqe: __IncompleteArrayField<__u64>,
}
#[test]
fn bindgen_test_layout_io_uring_cqe() {
    const UNINIT: ::std::mem::MaybeUninit<io_uring_cqe> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<io_uring_cqe>(),
        16usize,
        concat!("Size of: ", stringify!(io_uring_cqe))
    );
    assert_eq!(
        ::std::mem::align_of::<io_uring_cqe>(),
        8usize,
        concat!("Alignment of ", stringify!(io_uring_cqe))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_cqe),
            "::",
            stringify!(user_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).res) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_cqe),
            "::",
            stringify!(res)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_cqe),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).big_cqe) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_cqe),
            "::",
            stringify!(big_cqe)
        )
    );
}
pub const IORING_CQE_BUFFER_SHIFT: _bindgen_ty_20 = 16;
pub type _bindgen_ty_20 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct io_sqring_offsets {
    pub head: __u32,
    pub tail: __u32,
    pub ring_mask: __u32,
    pub ring_entries: __u32,
    pub flags: __u32,
    pub dropped: __u32,
    pub array: __u32,
    pub resv1: __u32,
    pub user_addr: __u64,
}
#[test]
fn bindgen_test_layout_io_sqring_offsets() {
    const UNINIT: ::std::mem::MaybeUninit<io_sqring_offsets> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<io_sqring_offsets>(),
        40usize,
        concat!("Size of: ", stringify!(io_sqring_offsets))
    );
    assert_eq!(
        ::std::mem::align_of::<io_sqring_offsets>(),
        8usize,
        concat!("Alignment of ", stringify!(io_sqring_offsets))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_sqring_offsets),
            "::",
            stringify!(head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tail) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(io_sqring_offsets),
            "::",
            stringify!(tail)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ring_mask) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(io_sqring_offsets),
            "::",
            stringify!(ring_mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ring_entries) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(io_sqring_offsets),
            "::",
            stringify!(ring_entries)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(io_sqring_offsets),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dropped) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(io_sqring_offsets),
            "::",
            stringify!(dropped)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).array) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(io_sqring_offsets),
            "::",
            stringify!(array)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resv1) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(io_sqring_offsets),
            "::",
            stringify!(resv1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_addr) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(io_sqring_offsets),
            "::",
            stringify!(user_addr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct io_cqring_offsets {
    pub head: __u32,
    pub tail: __u32,
    pub ring_mask: __u32,
    pub ring_entries: __u32,
    pub overflow: __u32,
    pub cqes: __u32,
    pub flags: __u32,
    pub resv1: __u32,
    pub user_addr: __u64,
}
#[test]
fn bindgen_test_layout_io_cqring_offsets() {
    const UNINIT: ::std::mem::MaybeUninit<io_cqring_offsets> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<io_cqring_offsets>(),
        40usize,
        concat!("Size of: ", stringify!(io_cqring_offsets))
    );
    assert_eq!(
        ::std::mem::align_of::<io_cqring_offsets>(),
        8usize,
        concat!("Alignment of ", stringify!(io_cqring_offsets))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_cqring_offsets),
            "::",
            stringify!(head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tail) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(io_cqring_offsets),
            "::",
            stringify!(tail)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ring_mask) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(io_cqring_offsets),
            "::",
            stringify!(ring_mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ring_entries) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(io_cqring_offsets),
            "::",
            stringify!(ring_entries)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).overflow) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(io_cqring_offsets),
            "::",
            stringify!(overflow)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cqes) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(io_cqring_offsets),
            "::",
            stringify!(cqes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(io_cqring_offsets),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resv1) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(io_cqring_offsets),
            "::",
            stringify!(resv1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_addr) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(io_cqring_offsets),
            "::",
            stringify!(user_addr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct io_uring_params {
    pub sq_entries: __u32,
    pub cq_entries: __u32,
    pub flags: __u32,
    pub sq_thread_cpu: __u32,
    pub sq_thread_idle: __u32,
    pub features: __u32,
    pub wq_fd: __u32,
    pub resv: [__u32; 3usize],
    pub sq_off: io_sqring_offsets,
    pub cq_off: io_cqring_offsets,
}
#[test]
fn bindgen_test_layout_io_uring_params() {
    const UNINIT: ::std::mem::MaybeUninit<io_uring_params> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<io_uring_params>(),
        120usize,
        concat!("Size of: ", stringify!(io_uring_params))
    );
    assert_eq!(
        ::std::mem::align_of::<io_uring_params>(),
        8usize,
        concat!("Alignment of ", stringify!(io_uring_params))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sq_entries) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_params),
            "::",
            stringify!(sq_entries)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cq_entries) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_params),
            "::",
            stringify!(cq_entries)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_params),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sq_thread_cpu) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_params),
            "::",
            stringify!(sq_thread_cpu)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sq_thread_idle) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_params),
            "::",
            stringify!(sq_thread_idle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).features) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_params),
            "::",
            stringify!(features)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wq_fd) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_params),
            "::",
            stringify!(wq_fd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resv) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_params),
            "::",
            stringify!(resv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sq_off) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_params),
            "::",
            stringify!(sq_off)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cq_off) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_params),
            "::",
            stringify!(cq_off)
        )
    );
}
pub const IORING_REGISTER_BUFFERS: _bindgen_ty_21 = 0;
pub const IORING_UNREGISTER_BUFFERS: _bindgen_ty_21 = 1;
pub const IORING_REGISTER_FILES: _bindgen_ty_21 = 2;
pub const IORING_UNREGISTER_FILES: _bindgen_ty_21 = 3;
pub const IORING_REGISTER_EVENTFD: _bindgen_ty_21 = 4;
pub const IORING_UNREGISTER_EVENTFD: _bindgen_ty_21 = 5;
pub const IORING_REGISTER_FILES_UPDATE: _bindgen_ty_21 = 6;
pub const IORING_REGISTER_EVENTFD_ASYNC: _bindgen_ty_21 = 7;
pub const IORING_REGISTER_PROBE: _bindgen_ty_21 = 8;
pub const IORING_REGISTER_PERSONALITY: _bindgen_ty_21 = 9;
pub const IORING_UNREGISTER_PERSONALITY: _bindgen_ty_21 = 10;
pub const IORING_REGISTER_RESTRICTIONS: _bindgen_ty_21 = 11;
pub const IORING_REGISTER_ENABLE_RINGS: _bindgen_ty_21 = 12;
pub const IORING_REGISTER_FILES2: _bindgen_ty_21 = 13;
pub const IORING_REGISTER_FILES_UPDATE2: _bindgen_ty_21 = 14;
pub const IORING_REGISTER_BUFFERS2: _bindgen_ty_21 = 15;
pub const IORING_REGISTER_BUFFERS_UPDATE: _bindgen_ty_21 = 16;
pub const IORING_REGISTER_IOWQ_AFF: _bindgen_ty_21 = 17;
pub const IORING_UNREGISTER_IOWQ_AFF: _bindgen_ty_21 = 18;
pub const IORING_REGISTER_IOWQ_MAX_WORKERS: _bindgen_ty_21 = 19;
pub const IORING_REGISTER_RING_FDS: _bindgen_ty_21 = 20;
pub const IORING_UNREGISTER_RING_FDS: _bindgen_ty_21 = 21;
pub const IORING_REGISTER_PBUF_RING: _bindgen_ty_21 = 22;
pub const IORING_UNREGISTER_PBUF_RING: _bindgen_ty_21 = 23;
pub const IORING_REGISTER_SYNC_CANCEL: _bindgen_ty_21 = 24;
pub const IORING_REGISTER_FILE_ALLOC_RANGE: _bindgen_ty_21 = 25;
pub const IORING_REGISTER_LAST: _bindgen_ty_21 = 26;
pub const IORING_REGISTER_USE_REGISTERED_RING: _bindgen_ty_21 = 2147483648;
pub type _bindgen_ty_21 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct io_uring_files_update {
    pub offset: __u32,
    pub resv: __u32,
    pub fds: __u64,
}
#[test]
fn bindgen_test_layout_io_uring_files_update() {
    const UNINIT: ::std::mem::MaybeUninit<io_uring_files_update> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<io_uring_files_update>(),
        16usize,
        concat!("Size of: ", stringify!(io_uring_files_update))
    );
    assert_eq!(
        ::std::mem::align_of::<io_uring_files_update>(),
        8usize,
        concat!("Alignment of ", stringify!(io_uring_files_update))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_files_update),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resv) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_files_update),
            "::",
            stringify!(resv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fds) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_files_update),
            "::",
            stringify!(fds)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct io_uring_rsrc_register {
    pub nr: __u32,
    pub flags: __u32,
    pub resv2: __u64,
    pub data: __u64,
    pub tags: __u64,
}
#[test]
fn bindgen_test_layout_io_uring_rsrc_register() {
    const UNINIT: ::std::mem::MaybeUninit<io_uring_rsrc_register> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<io_uring_rsrc_register>(),
        32usize,
        concat!("Size of: ", stringify!(io_uring_rsrc_register))
    );
    assert_eq!(
        ::std::mem::align_of::<io_uring_rsrc_register>(),
        8usize,
        concat!("Alignment of ", stringify!(io_uring_rsrc_register))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_rsrc_register),
            "::",
            stringify!(nr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_rsrc_register),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resv2) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_rsrc_register),
            "::",
            stringify!(resv2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_rsrc_register),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tags) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_rsrc_register),
            "::",
            stringify!(tags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct io_uring_rsrc_update {
    pub offset: __u32,
    pub resv: __u32,
    pub data: __u64,
}
#[test]
fn bindgen_test_layout_io_uring_rsrc_update() {
    const UNINIT: ::std::mem::MaybeUninit<io_uring_rsrc_update> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<io_uring_rsrc_update>(),
        16usize,
        concat!("Size of: ", stringify!(io_uring_rsrc_update))
    );
    assert_eq!(
        ::std::mem::align_of::<io_uring_rsrc_update>(),
        8usize,
        concat!("Alignment of ", stringify!(io_uring_rsrc_update))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_rsrc_update),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resv) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_rsrc_update),
            "::",
            stringify!(resv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_rsrc_update),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct io_uring_rsrc_update2 {
    pub offset: __u32,
    pub resv: __u32,
    pub data: __u64,
    pub tags: __u64,
    pub nr: __u32,
    pub resv2: __u32,
}
#[test]
fn bindgen_test_layout_io_uring_rsrc_update2() {
    const UNINIT: ::std::mem::MaybeUninit<io_uring_rsrc_update2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<io_uring_rsrc_update2>(),
        32usize,
        concat!("Size of: ", stringify!(io_uring_rsrc_update2))
    );
    assert_eq!(
        ::std::mem::align_of::<io_uring_rsrc_update2>(),
        8usize,
        concat!("Alignment of ", stringify!(io_uring_rsrc_update2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_rsrc_update2),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resv) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_rsrc_update2),
            "::",
            stringify!(resv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_rsrc_update2),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_rsrc_update2),
            "::",
            stringify!(tags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nr) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_rsrc_update2),
            "::",
            stringify!(nr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resv2) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_rsrc_update2),
            "::",
            stringify!(resv2)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct io_uring_probe_op {
    pub op: __u8,
    pub resv: __u8,
    pub flags: __u16,
    pub resv2: __u32,
}
#[test]
fn bindgen_test_layout_io_uring_probe_op() {
    const UNINIT: ::std::mem::MaybeUninit<io_uring_probe_op> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<io_uring_probe_op>(),
        8usize,
        concat!("Size of: ", stringify!(io_uring_probe_op))
    );
    assert_eq!(
        ::std::mem::align_of::<io_uring_probe_op>(),
        4usize,
        concat!("Alignment of ", stringify!(io_uring_probe_op))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).op) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_probe_op),
            "::",
            stringify!(op)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resv) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_probe_op),
            "::",
            stringify!(resv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_probe_op),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resv2) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_probe_op),
            "::",
            stringify!(resv2)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct io_uring_probe {
    pub last_op: __u8,
    pub ops_len: __u8,
    pub resv: __u16,
    pub resv2: [__u32; 3usize],
    pub ops: __IncompleteArrayField<io_uring_probe_op>,
}
#[test]
fn bindgen_test_layout_io_uring_probe() {
    const UNINIT: ::std::mem::MaybeUninit<io_uring_probe> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<io_uring_probe>(),
        16usize,
        concat!("Size of: ", stringify!(io_uring_probe))
    );
    assert_eq!(
        ::std::mem::align_of::<io_uring_probe>(),
        4usize,
        concat!("Alignment of ", stringify!(io_uring_probe))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).last_op) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_probe),
            "::",
            stringify!(last_op)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ops_len) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_probe),
            "::",
            stringify!(ops_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resv) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_probe),
            "::",
            stringify!(resv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resv2) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_probe),
            "::",
            stringify!(resv2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ops) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_probe),
            "::",
            stringify!(ops)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct io_uring_restriction {
    pub opcode: __u16,
    pub __bindgen_anon_1: io_uring_restriction__bindgen_ty_1,
    pub resv: __u8,
    pub resv2: [__u32; 3usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union io_uring_restriction__bindgen_ty_1 {
    pub register_op: __u8,
    pub sqe_op: __u8,
    pub sqe_flags: __u8,
}
#[test]
fn bindgen_test_layout_io_uring_restriction__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<io_uring_restriction__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<io_uring_restriction__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(io_uring_restriction__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<io_uring_restriction__bindgen_ty_1>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(io_uring_restriction__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).register_op) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_restriction__bindgen_ty_1),
            "::",
            stringify!(register_op)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sqe_op) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_restriction__bindgen_ty_1),
            "::",
            stringify!(sqe_op)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sqe_flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_restriction__bindgen_ty_1),
            "::",
            stringify!(sqe_flags)
        )
    );
}
#[test]
fn bindgen_test_layout_io_uring_restriction() {
    const UNINIT: ::std::mem::MaybeUninit<io_uring_restriction> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<io_uring_restriction>(),
        16usize,
        concat!("Size of: ", stringify!(io_uring_restriction))
    );
    assert_eq!(
        ::std::mem::align_of::<io_uring_restriction>(),
        4usize,
        concat!("Alignment of ", stringify!(io_uring_restriction))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).opcode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_restriction),
            "::",
            stringify!(opcode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resv) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_restriction),
            "::",
            stringify!(resv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resv2) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_restriction),
            "::",
            stringify!(resv2)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct io_uring_buf {
    pub addr: __u64,
    pub len: __u32,
    pub bid: __u16,
    pub resv: __u16,
}
#[test]
fn bindgen_test_layout_io_uring_buf() {
    const UNINIT: ::std::mem::MaybeUninit<io_uring_buf> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<io_uring_buf>(),
        16usize,
        concat!("Size of: ", stringify!(io_uring_buf))
    );
    assert_eq!(
        ::std::mem::align_of::<io_uring_buf>(),
        8usize,
        concat!("Alignment of ", stringify!(io_uring_buf))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_buf),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_buf),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bid) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_buf),
            "::",
            stringify!(bid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resv) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_buf),
            "::",
            stringify!(resv)
        )
    );
}
#[repr(C)]
pub struct io_uring_buf_ring {
    pub __bindgen_anon_1: io_uring_buf_ring__bindgen_ty_1,
}
#[repr(C)]
pub struct io_uring_buf_ring__bindgen_ty_1 {
    pub __bindgen_anon_1: __BindgenUnionField<io_uring_buf_ring__bindgen_ty_1__bindgen_ty_1>,
    pub bufs: __BindgenUnionField<[io_uring_buf; 0usize]>,
    pub bindgen_union_field: [u64; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct io_uring_buf_ring__bindgen_ty_1__bindgen_ty_1 {
    pub resv1: __u64,
    pub resv2: __u32,
    pub resv3: __u16,
    pub tail: __u16,
}
#[test]
fn bindgen_test_layout_io_uring_buf_ring__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<io_uring_buf_ring__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<io_uring_buf_ring__bindgen_ty_1__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(io_uring_buf_ring__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<io_uring_buf_ring__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(io_uring_buf_ring__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resv1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_buf_ring__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(resv1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resv2) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_buf_ring__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(resv2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resv3) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_buf_ring__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(resv3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tail) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_buf_ring__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(tail)
        )
    );
}
#[test]
fn bindgen_test_layout_io_uring_buf_ring__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<io_uring_buf_ring__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<io_uring_buf_ring__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(io_uring_buf_ring__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<io_uring_buf_ring__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(io_uring_buf_ring__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bufs) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_buf_ring__bindgen_ty_1),
            "::",
            stringify!(bufs)
        )
    );
}
#[test]
fn bindgen_test_layout_io_uring_buf_ring() {
    assert_eq!(
        ::std::mem::size_of::<io_uring_buf_ring>(),
        16usize,
        concat!("Size of: ", stringify!(io_uring_buf_ring))
    );
    assert_eq!(
        ::std::mem::align_of::<io_uring_buf_ring>(),
        8usize,
        concat!("Alignment of ", stringify!(io_uring_buf_ring))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct io_uring_buf_reg {
    pub ring_addr: __u64,
    pub ring_entries: __u32,
    pub bgid: __u16,
    pub flags: __u16,
    pub resv: [__u64; 3usize],
}
#[test]
fn bindgen_test_layout_io_uring_buf_reg() {
    const UNINIT: ::std::mem::MaybeUninit<io_uring_buf_reg> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<io_uring_buf_reg>(),
        40usize,
        concat!("Size of: ", stringify!(io_uring_buf_reg))
    );
    assert_eq!(
        ::std::mem::align_of::<io_uring_buf_reg>(),
        8usize,
        concat!("Alignment of ", stringify!(io_uring_buf_reg))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ring_addr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_buf_reg),
            "::",
            stringify!(ring_addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ring_entries) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_buf_reg),
            "::",
            stringify!(ring_entries)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bgid) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_buf_reg),
            "::",
            stringify!(bgid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_buf_reg),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resv) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_buf_reg),
            "::",
            stringify!(resv)
        )
    );
}
pub const IORING_RESTRICTION_REGISTER_OP: _bindgen_ty_24 = 0;
pub const IORING_RESTRICTION_SQE_OP: _bindgen_ty_24 = 1;
pub const IORING_RESTRICTION_SQE_FLAGS_ALLOWED: _bindgen_ty_24 = 2;
pub const IORING_RESTRICTION_SQE_FLAGS_REQUIRED: _bindgen_ty_24 = 3;
pub const IORING_RESTRICTION_LAST: _bindgen_ty_24 = 4;
pub type _bindgen_ty_24 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct io_uring_getevents_arg {
    pub sigmask: __u64,
    pub sigmask_sz: __u32,
    pub pad: __u32,
    pub ts: __u64,
}
#[test]
fn bindgen_test_layout_io_uring_getevents_arg() {
    const UNINIT: ::std::mem::MaybeUninit<io_uring_getevents_arg> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<io_uring_getevents_arg>(),
        24usize,
        concat!("Size of: ", stringify!(io_uring_getevents_arg))
    );
    assert_eq!(
        ::std::mem::align_of::<io_uring_getevents_arg>(),
        8usize,
        concat!("Alignment of ", stringify!(io_uring_getevents_arg))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sigmask) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_getevents_arg),
            "::",
            stringify!(sigmask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sigmask_sz) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_getevents_arg),
            "::",
            stringify!(sigmask_sz)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_getevents_arg),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ts) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_getevents_arg),
            "::",
            stringify!(ts)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct io_uring_sync_cancel_reg {
    pub addr: __u64,
    pub fd: __s32,
    pub flags: __u32,
    pub timeout: __kernel_timespec,
    pub pad: [__u64; 4usize],
}
#[test]
fn bindgen_test_layout_io_uring_sync_cancel_reg() {
    const UNINIT: ::std::mem::MaybeUninit<io_uring_sync_cancel_reg> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<io_uring_sync_cancel_reg>(),
        64usize,
        concat!("Size of: ", stringify!(io_uring_sync_cancel_reg))
    );
    assert_eq!(
        ::std::mem::align_of::<io_uring_sync_cancel_reg>(),
        8usize,
        concat!("Alignment of ", stringify!(io_uring_sync_cancel_reg))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_sync_cancel_reg),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fd) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_sync_cancel_reg),
            "::",
            stringify!(fd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_sync_cancel_reg),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timeout) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_sync_cancel_reg),
            "::",
            stringify!(timeout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_sync_cancel_reg),
            "::",
            stringify!(pad)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct io_uring_file_index_range {
    pub off: __u32,
    pub len: __u32,
    pub resv: __u64,
}
#[test]
fn bindgen_test_layout_io_uring_file_index_range() {
    const UNINIT: ::std::mem::MaybeUninit<io_uring_file_index_range> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<io_uring_file_index_range>(),
        16usize,
        concat!("Size of: ", stringify!(io_uring_file_index_range))
    );
    assert_eq!(
        ::std::mem::align_of::<io_uring_file_index_range>(),
        8usize,
        concat!("Alignment of ", stringify!(io_uring_file_index_range))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).off) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_file_index_range),
            "::",
            stringify!(off)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_file_index_range),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resv) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_file_index_range),
            "::",
            stringify!(resv)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct io_uring_recvmsg_out {
    pub namelen: __u32,
    pub controllen: __u32,
    pub payloadlen: __u32,
    pub flags: __u32,
}
#[test]
fn bindgen_test_layout_io_uring_recvmsg_out() {
    const UNINIT: ::std::mem::MaybeUninit<io_uring_recvmsg_out> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<io_uring_recvmsg_out>(),
        16usize,
        concat!("Size of: ", stringify!(io_uring_recvmsg_out))
    );
    assert_eq!(
        ::std::mem::align_of::<io_uring_recvmsg_out>(),
        4usize,
        concat!("Alignment of ", stringify!(io_uring_recvmsg_out))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).namelen) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_recvmsg_out),
            "::",
            stringify!(namelen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).controllen) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_recvmsg_out),
            "::",
            stringify!(controllen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).payloadlen) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_recvmsg_out),
            "::",
            stringify!(payloadlen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_recvmsg_out),
            "::",
            stringify!(flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct io_uring_sq {
    pub khead: *mut ::std::os::raw::c_uint,
    pub ktail: *mut ::std::os::raw::c_uint,
    pub kring_mask: *mut ::std::os::raw::c_uint,
    pub kring_entries: *mut ::std::os::raw::c_uint,
    pub kflags: *mut ::std::os::raw::c_uint,
    pub kdropped: *mut ::std::os::raw::c_uint,
    pub array: *mut ::std::os::raw::c_uint,
    pub sqes: *mut io_uring_sqe,
    pub sqe_head: ::std::os::raw::c_uint,
    pub sqe_tail: ::std::os::raw::c_uint,
    pub ring_sz: usize,
    pub ring_ptr: *mut ::std::os::raw::c_void,
    pub ring_mask: ::std::os::raw::c_uint,
    pub ring_entries: ::std::os::raw::c_uint,
    pub pad: [::std::os::raw::c_uint; 2usize],
}
#[test]
fn bindgen_test_layout_io_uring_sq() {
    const UNINIT: ::std::mem::MaybeUninit<io_uring_sq> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<io_uring_sq>(),
        104usize,
        concat!("Size of: ", stringify!(io_uring_sq))
    );
    assert_eq!(
        ::std::mem::align_of::<io_uring_sq>(),
        8usize,
        concat!("Alignment of ", stringify!(io_uring_sq))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).khead) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_sq),
            "::",
            stringify!(khead)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ktail) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_sq),
            "::",
            stringify!(ktail)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kring_mask) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_sq),
            "::",
            stringify!(kring_mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kring_entries) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_sq),
            "::",
            stringify!(kring_entries)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kflags) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_sq),
            "::",
            stringify!(kflags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kdropped) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_sq),
            "::",
            stringify!(kdropped)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).array) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_sq),
            "::",
            stringify!(array)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sqes) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_sq),
            "::",
            stringify!(sqes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sqe_head) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_sq),
            "::",
            stringify!(sqe_head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sqe_tail) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_sq),
            "::",
            stringify!(sqe_tail)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ring_sz) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_sq),
            "::",
            stringify!(ring_sz)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ring_ptr) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_sq),
            "::",
            stringify!(ring_ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ring_mask) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_sq),
            "::",
            stringify!(ring_mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ring_entries) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_sq),
            "::",
            stringify!(ring_entries)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_sq),
            "::",
            stringify!(pad)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct io_uring_cq {
    pub khead: *mut ::std::os::raw::c_uint,
    pub ktail: *mut ::std::os::raw::c_uint,
    pub kring_mask: *mut ::std::os::raw::c_uint,
    pub kring_entries: *mut ::std::os::raw::c_uint,
    pub kflags: *mut ::std::os::raw::c_uint,
    pub koverflow: *mut ::std::os::raw::c_uint,
    pub cqes: *mut io_uring_cqe,
    pub ring_sz: usize,
    pub ring_ptr: *mut ::std::os::raw::c_void,
    pub ring_mask: ::std::os::raw::c_uint,
    pub ring_entries: ::std::os::raw::c_uint,
    pub pad: [::std::os::raw::c_uint; 2usize],
}
#[test]
fn bindgen_test_layout_io_uring_cq() {
    const UNINIT: ::std::mem::MaybeUninit<io_uring_cq> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<io_uring_cq>(),
        88usize,
        concat!("Size of: ", stringify!(io_uring_cq))
    );
    assert_eq!(
        ::std::mem::align_of::<io_uring_cq>(),
        8usize,
        concat!("Alignment of ", stringify!(io_uring_cq))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).khead) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_cq),
            "::",
            stringify!(khead)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ktail) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_cq),
            "::",
            stringify!(ktail)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kring_mask) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_cq),
            "::",
            stringify!(kring_mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kring_entries) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_cq),
            "::",
            stringify!(kring_entries)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kflags) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_cq),
            "::",
            stringify!(kflags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).koverflow) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_cq),
            "::",
            stringify!(koverflow)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cqes) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_cq),
            "::",
            stringify!(cqes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ring_sz) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_cq),
            "::",
            stringify!(ring_sz)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ring_ptr) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_cq),
            "::",
            stringify!(ring_ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ring_mask) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_cq),
            "::",
            stringify!(ring_mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ring_entries) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_cq),
            "::",
            stringify!(ring_entries)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring_cq),
            "::",
            stringify!(pad)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct io_uring {
    pub sq: io_uring_sq,
    pub cq: io_uring_cq,
    pub flags: ::std::os::raw::c_uint,
    pub ring_fd: ::std::os::raw::c_int,
    pub features: ::std::os::raw::c_uint,
    pub enter_ring_fd: ::std::os::raw::c_int,
    pub int_flags: __u8,
    pub pad: [__u8; 3usize],
    pub pad2: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_io_uring() {
    const UNINIT: ::std::mem::MaybeUninit<io_uring> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<io_uring>(),
        216usize,
        concat!("Size of: ", stringify!(io_uring))
    );
    assert_eq!(
        ::std::mem::align_of::<io_uring>(),
        8usize,
        concat!("Alignment of ", stringify!(io_uring))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sq) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring),
            "::",
            stringify!(sq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cq) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring),
            "::",
            stringify!(cq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ring_fd) as usize - ptr as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring),
            "::",
            stringify!(ring_fd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).features) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring),
            "::",
            stringify!(features)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enter_ring_fd) as usize - ptr as usize },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring),
            "::",
            stringify!(enter_ring_fd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).int_flags) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring),
            "::",
            stringify!(int_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize },
        209usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad2) as usize - ptr as usize },
        212usize,
        concat!(
            "Offset of field: ",
            stringify!(io_uring),
            "::",
            stringify!(pad2)
        )
    );
}
extern "C" {
    pub fn io_uring_get_probe_ring(ring: *mut io_uring) -> *mut io_uring_probe;
}
extern "C" {
    pub fn io_uring_get_probe() -> *mut io_uring_probe;
}
extern "C" {
    pub fn io_uring_free_probe(probe: *mut io_uring_probe);
}
extern "C" {
    pub fn io_uring_opcode_supported(
        p: *const io_uring_probe,
        op: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn io_uring_queue_init_mem(
        entries: ::std::os::raw::c_uint,
        ring: *mut io_uring,
        p: *mut io_uring_params,
        buf: *mut ::std::os::raw::c_void,
        buf_size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn io_uring_queue_init_params(
        entries: ::std::os::raw::c_uint,
        ring: *mut io_uring,
        p: *mut io_uring_params,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn io_uring_queue_init(
        entries: ::std::os::raw::c_uint,
        ring: *mut io_uring,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn io_uring_queue_mmap(
        fd: ::std::os::raw::c_int,
        p: *mut io_uring_params,
        ring: *mut io_uring,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn io_uring_ring_dontfork(ring: *mut io_uring) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn io_uring_queue_exit(ring: *mut io_uring);
}
extern "C" {
    pub fn io_uring_peek_batch_cqe(
        ring: *mut io_uring,
        cqes: *mut *mut io_uring_cqe,
        count: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn io_uring_wait_cqes(
        ring: *mut io_uring,
        cqe_ptr: *mut *mut io_uring_cqe,
        wait_nr: ::std::os::raw::c_uint,
        ts: *mut __kernel_timespec,
        sigmask: *mut sigset_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn io_uring_wait_cqe_timeout(
        ring: *mut io_uring,
        cqe_ptr: *mut *mut io_uring_cqe,
        ts: *mut __kernel_timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn io_uring_submit(ring: *mut io_uring) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn io_uring_submit_and_wait(
        ring: *mut io_uring,
        wait_nr: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn io_uring_submit_and_wait_timeout(
        ring: *mut io_uring,
        cqe_ptr: *mut *mut io_uring_cqe,
        wait_nr: ::std::os::raw::c_uint,
        ts: *mut __kernel_timespec,
        sigmask: *mut sigset_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn io_uring_register_buffers(
        ring: *mut io_uring,
        iovecs: *const iovec,
        nr_iovecs: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn io_uring_register_buffers_tags(
        ring: *mut io_uring,
        iovecs: *const iovec,
        tags: *const __u64,
        nr: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn io_uring_register_buffers_sparse(
        ring: *mut io_uring,
        nr: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn io_uring_register_buffers_update_tag(
        ring: *mut io_uring,
        off: ::std::os::raw::c_uint,
        iovecs: *const iovec,
        tags: *const __u64,
        nr: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn io_uring_unregister_buffers(ring: *mut io_uring) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn io_uring_register_files(
        ring: *mut io_uring,
        files: *const ::std::os::raw::c_int,
        nr_files: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn io_uring_register_files_tags(
        ring: *mut io_uring,
        files: *const ::std::os::raw::c_int,
        tags: *const __u64,
        nr: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn io_uring_register_files_sparse(
        ring: *mut io_uring,
        nr: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn io_uring_register_files_update_tag(
        ring: *mut io_uring,
        off: ::std::os::raw::c_uint,
        files: *const ::std::os::raw::c_int,
        tags: *const __u64,
        nr_files: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn io_uring_unregister_files(ring: *mut io_uring) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn io_uring_register_files_update(
        ring: *mut io_uring,
        off: ::std::os::raw::c_uint,
        files: *const ::std::os::raw::c_int,
        nr_files: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn io_uring_register_eventfd(
        ring: *mut io_uring,
        fd: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn io_uring_register_eventfd_async(
        ring: *mut io_uring,
        fd: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn io_uring_unregister_eventfd(ring: *mut io_uring) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn io_uring_register_probe(
        ring: *mut io_uring,
        p: *mut io_uring_probe,
        nr: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn io_uring_register_personality(ring: *mut io_uring) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn io_uring_unregister_personality(
        ring: *mut io_uring,
        id: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn io_uring_register_restrictions(
        ring: *mut io_uring,
        res: *mut io_uring_restriction,
        nr_res: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn io_uring_enable_rings(ring: *mut io_uring) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __io_uring_sqring_wait(ring: *mut io_uring) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn io_uring_register_iowq_aff(
        ring: *mut io_uring,
        cpusz: usize,
        mask: *const cpu_set_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn io_uring_unregister_iowq_aff(ring: *mut io_uring) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn io_uring_register_iowq_max_workers(
        ring: *mut io_uring,
        values: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn io_uring_register_ring_fd(ring: *mut io_uring) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn io_uring_unregister_ring_fd(ring: *mut io_uring) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn io_uring_close_ring_fd(ring: *mut io_uring) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn io_uring_register_buf_ring(
        ring: *mut io_uring,
        reg: *mut io_uring_buf_reg,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn io_uring_unregister_buf_ring(
        ring: *mut io_uring,
        bgid: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn io_uring_register_sync_cancel(
        ring: *mut io_uring,
        reg: *mut io_uring_sync_cancel_reg,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn io_uring_register_file_alloc_range(
        ring: *mut io_uring,
        off: ::std::os::raw::c_uint,
        len: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn io_uring_get_events(ring: *mut io_uring) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn io_uring_submit_and_get_events(ring: *mut io_uring) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn io_uring_enter(
        fd: ::std::os::raw::c_uint,
        to_submit: ::std::os::raw::c_uint,
        min_complete: ::std::os::raw::c_uint,
        flags: ::std::os::raw::c_uint,
        sig: *mut sigset_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn io_uring_enter2(
        fd: ::std::os::raw::c_uint,
        to_submit: ::std::os::raw::c_uint,
        min_complete: ::std::os::raw::c_uint,
        flags: ::std::os::raw::c_uint,
        sig: *mut sigset_t,
        sz: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn io_uring_setup(
        entries: ::std::os::raw::c_uint,
        p: *mut io_uring_params,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn io_uring_register(
        fd: ::std::os::raw::c_uint,
        opcode: ::std::os::raw::c_uint,
        arg: *const ::std::os::raw::c_void,
        nr_args: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn io_uring_setup_buf_ring(
        ring: *mut io_uring,
        nentries: ::std::os::raw::c_uint,
        bgid: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_uint,
        ret: *mut ::std::os::raw::c_int,
    ) -> *mut io_uring_buf_ring;
}
extern "C" {
    pub fn io_uring_free_buf_ring(
        ring: *mut io_uring,
        br: *mut io_uring_buf_ring,
        nentries: ::std::os::raw::c_uint,
        bgid: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __io_uring_get_cqe(
        ring: *mut io_uring,
        cqe_ptr: *mut *mut io_uring_cqe,
        submit: ::std::os::raw::c_uint,
        wait_nr: ::std::os::raw::c_uint,
        sigmask: *mut sigset_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn io_uring_cq_advance(ring: *mut io_uring, nr: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn io_uring_cqe_seen(ring: *mut io_uring, cqe: *mut io_uring_cqe);
}
extern "C" {
    pub fn io_uring_sqe_set_data(sqe: *mut io_uring_sqe, data: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn io_uring_cqe_get_data(cqe: *const io_uring_cqe) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn io_uring_sqe_set_data64(sqe: *mut io_uring_sqe, data: __u64);
}
extern "C" {
    pub fn io_uring_cqe_get_data64(cqe: *const io_uring_cqe) -> __u64;
}
extern "C" {
    pub fn io_uring_sqe_set_flags(sqe: *mut io_uring_sqe, flags: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn __io_uring_set_target_fixed_file(
        sqe: *mut io_uring_sqe,
        file_index: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn io_uring_prep_rw(
        op: ::std::os::raw::c_int,
        sqe: *mut io_uring_sqe,
        fd: ::std::os::raw::c_int,
        addr: *const ::std::os::raw::c_void,
        len: ::std::os::raw::c_uint,
        offset: __u64,
    );
}
extern "C" {
    pub fn io_uring_prep_splice(
        sqe: *mut io_uring_sqe,
        fd_in: ::std::os::raw::c_int,
        off_in: i64,
        fd_out: ::std::os::raw::c_int,
        off_out: i64,
        nbytes: ::std::os::raw::c_uint,
        splice_flags: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn io_uring_prep_tee(
        sqe: *mut io_uring_sqe,
        fd_in: ::std::os::raw::c_int,
        fd_out: ::std::os::raw::c_int,
        nbytes: ::std::os::raw::c_uint,
        splice_flags: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn io_uring_prep_readv(
        sqe: *mut io_uring_sqe,
        fd: ::std::os::raw::c_int,
        iovecs: *const iovec,
        nr_vecs: ::std::os::raw::c_uint,
        offset: __u64,
    );
}
extern "C" {
    pub fn io_uring_prep_readv2(
        sqe: *mut io_uring_sqe,
        fd: ::std::os::raw::c_int,
        iovecs: *const iovec,
        nr_vecs: ::std::os::raw::c_uint,
        offset: __u64,
        flags: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn io_uring_prep_read_fixed(
        sqe: *mut io_uring_sqe,
        fd: ::std::os::raw::c_int,
        buf: *mut ::std::os::raw::c_void,
        nbytes: ::std::os::raw::c_uint,
        offset: __u64,
        buf_index: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn io_uring_prep_writev(
        sqe: *mut io_uring_sqe,
        fd: ::std::os::raw::c_int,
        iovecs: *const iovec,
        nr_vecs: ::std::os::raw::c_uint,
        offset: __u64,
    );
}
extern "C" {
    pub fn io_uring_prep_writev2(
        sqe: *mut io_uring_sqe,
        fd: ::std::os::raw::c_int,
        iovecs: *const iovec,
        nr_vecs: ::std::os::raw::c_uint,
        offset: __u64,
        flags: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn io_uring_prep_write_fixed(
        sqe: *mut io_uring_sqe,
        fd: ::std::os::raw::c_int,
        buf: *const ::std::os::raw::c_void,
        nbytes: ::std::os::raw::c_uint,
        offset: __u64,
        buf_index: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn io_uring_prep_recvmsg(
        sqe: *mut io_uring_sqe,
        fd: ::std::os::raw::c_int,
        msg: *mut msghdr,
        flags: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn io_uring_prep_recvmsg_multishot(
        sqe: *mut io_uring_sqe,
        fd: ::std::os::raw::c_int,
        msg: *mut msghdr,
        flags: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn io_uring_prep_sendmsg(
        sqe: *mut io_uring_sqe,
        fd: ::std::os::raw::c_int,
        msg: *const msghdr,
        flags: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn __io_uring_prep_poll_mask(poll_mask: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn io_uring_prep_poll_add(
        sqe: *mut io_uring_sqe,
        fd: ::std::os::raw::c_int,
        poll_mask: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn io_uring_prep_poll_multishot(
        sqe: *mut io_uring_sqe,
        fd: ::std::os::raw::c_int,
        poll_mask: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn io_uring_prep_poll_remove(sqe: *mut io_uring_sqe, user_data: __u64);
}
extern "C" {
    pub fn io_uring_prep_poll_update(
        sqe: *mut io_uring_sqe,
        old_user_data: __u64,
        new_user_data: __u64,
        poll_mask: ::std::os::raw::c_uint,
        flags: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn io_uring_prep_fsync(
        sqe: *mut io_uring_sqe,
        fd: ::std::os::raw::c_int,
        fsync_flags: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn io_uring_prep_nop(sqe: *mut io_uring_sqe);
}
extern "C" {
    pub fn io_uring_prep_timeout(
        sqe: *mut io_uring_sqe,
        ts: *mut __kernel_timespec,
        count: ::std::os::raw::c_uint,
        flags: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn io_uring_prep_timeout_remove(
        sqe: *mut io_uring_sqe,
        user_data: __u64,
        flags: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn io_uring_prep_timeout_update(
        sqe: *mut io_uring_sqe,
        ts: *mut __kernel_timespec,
        user_data: __u64,
        flags: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn io_uring_prep_accept(
        sqe: *mut io_uring_sqe,
        fd: ::std::os::raw::c_int,
        addr: *mut sockaddr,
        addrlen: *mut socklen_t,
        flags: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn io_uring_prep_accept_direct(
        sqe: *mut io_uring_sqe,
        fd: ::std::os::raw::c_int,
        addr: *mut sockaddr,
        addrlen: *mut socklen_t,
        flags: ::std::os::raw::c_int,
        file_index: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn io_uring_prep_multishot_accept(
        sqe: *mut io_uring_sqe,
        fd: ::std::os::raw::c_int,
        addr: *mut sockaddr,
        addrlen: *mut socklen_t,
        flags: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn io_uring_prep_multishot_accept_direct(
        sqe: *mut io_uring_sqe,
        fd: ::std::os::raw::c_int,
        addr: *mut sockaddr,
        addrlen: *mut socklen_t,
        flags: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn io_uring_prep_cancel64(
        sqe: *mut io_uring_sqe,
        user_data: __u64,
        flags: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn io_uring_prep_cancel(
        sqe: *mut io_uring_sqe,
        user_data: *mut ::std::os::raw::c_void,
        flags: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn io_uring_prep_cancel_fd(
        sqe: *mut io_uring_sqe,
        fd: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn io_uring_prep_link_timeout(
        sqe: *mut io_uring_sqe,
        ts: *mut __kernel_timespec,
        flags: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn io_uring_prep_connect(
        sqe: *mut io_uring_sqe,
        fd: ::std::os::raw::c_int,
        addr: *const sockaddr,
        addrlen: socklen_t,
    );
}
extern "C" {
    pub fn io_uring_prep_files_update(
        sqe: *mut io_uring_sqe,
        fds: *mut ::std::os::raw::c_int,
        nr_fds: ::std::os::raw::c_uint,
        offset: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn io_uring_prep_fallocate(
        sqe: *mut io_uring_sqe,
        fd: ::std::os::raw::c_int,
        mode: ::std::os::raw::c_int,
        offset: __u64,
        len: __u64,
    );
}
extern "C" {
    pub fn io_uring_prep_openat(
        sqe: *mut io_uring_sqe,
        dfd: ::std::os::raw::c_int,
        path: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
        mode: mode_t,
    );
}
extern "C" {
    pub fn io_uring_prep_openat_direct(
        sqe: *mut io_uring_sqe,
        dfd: ::std::os::raw::c_int,
        path: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
        mode: mode_t,
        file_index: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn io_uring_prep_close(sqe: *mut io_uring_sqe, fd: ::std::os::raw::c_int);
}
extern "C" {
    pub fn io_uring_prep_close_direct(sqe: *mut io_uring_sqe, file_index: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn io_uring_prep_read(
        sqe: *mut io_uring_sqe,
        fd: ::std::os::raw::c_int,
        buf: *mut ::std::os::raw::c_void,
        nbytes: ::std::os::raw::c_uint,
        offset: __u64,
    );
}
extern "C" {
    pub fn io_uring_prep_read_multishot(
        sqe: *mut io_uring_sqe,
        fd: ::std::os::raw::c_int,
        nbytes: ::std::os::raw::c_uint,
        offset: __u64,
        buf_group: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn io_uring_prep_write(
        sqe: *mut io_uring_sqe,
        fd: ::std::os::raw::c_int,
        buf: *const ::std::os::raw::c_void,
        nbytes: ::std::os::raw::c_uint,
        offset: __u64,
    );
}
extern "C" {
    pub fn io_uring_prep_statx(
        sqe: *mut io_uring_sqe,
        dfd: ::std::os::raw::c_int,
        path: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
        mask: ::std::os::raw::c_uint,
        statxbuf: *mut statx,
    );
}
extern "C" {
    pub fn io_uring_prep_fadvise(
        sqe: *mut io_uring_sqe,
        fd: ::std::os::raw::c_int,
        offset: __u64,
        len: off_t,
        advice: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn io_uring_prep_madvise(
        sqe: *mut io_uring_sqe,
        addr: *mut ::std::os::raw::c_void,
        length: off_t,
        advice: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn io_uring_prep_send(
        sqe: *mut io_uring_sqe,
        sockfd: ::std::os::raw::c_int,
        buf: *const ::std::os::raw::c_void,
        len: usize,
        flags: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn io_uring_prep_send_set_addr(
        sqe: *mut io_uring_sqe,
        dest_addr: *const sockaddr,
        addr_len: __u16,
    );
}
extern "C" {
    pub fn io_uring_prep_sendto(
        sqe: *mut io_uring_sqe,
        sockfd: ::std::os::raw::c_int,
        buf: *const ::std::os::raw::c_void,
        len: usize,
        flags: ::std::os::raw::c_int,
        addr: *const sockaddr,
        addrlen: socklen_t,
    );
}
extern "C" {
    pub fn io_uring_prep_send_zc(
        sqe: *mut io_uring_sqe,
        sockfd: ::std::os::raw::c_int,
        buf: *const ::std::os::raw::c_void,
        len: usize,
        flags: ::std::os::raw::c_int,
        zc_flags: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn io_uring_prep_send_zc_fixed(
        sqe: *mut io_uring_sqe,
        sockfd: ::std::os::raw::c_int,
        buf: *const ::std::os::raw::c_void,
        len: usize,
        flags: ::std::os::raw::c_int,
        zc_flags: ::std::os::raw::c_uint,
        buf_index: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn io_uring_prep_sendmsg_zc(
        sqe: *mut io_uring_sqe,
        fd: ::std::os::raw::c_int,
        msg: *const msghdr,
        flags: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn io_uring_prep_recv(
        sqe: *mut io_uring_sqe,
        sockfd: ::std::os::raw::c_int,
        buf: *mut ::std::os::raw::c_void,
        len: usize,
        flags: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn io_uring_prep_recv_multishot(
        sqe: *mut io_uring_sqe,
        sockfd: ::std::os::raw::c_int,
        buf: *mut ::std::os::raw::c_void,
        len: usize,
        flags: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn io_uring_recvmsg_validate(
        buf: *mut ::std::os::raw::c_void,
        buf_len: ::std::os::raw::c_int,
        msgh: *mut msghdr,
    ) -> *mut io_uring_recvmsg_out;
}
extern "C" {
    pub fn io_uring_recvmsg_name(o: *mut io_uring_recvmsg_out) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn io_uring_recvmsg_cmsg_firsthdr(
        o: *mut io_uring_recvmsg_out,
        msgh: *mut msghdr,
    ) -> *mut cmsghdr;
}
extern "C" {
    pub fn io_uring_recvmsg_cmsg_nexthdr(
        o: *mut io_uring_recvmsg_out,
        msgh: *mut msghdr,
        cmsg: *mut cmsghdr,
    ) -> *mut cmsghdr;
}
extern "C" {
    pub fn io_uring_recvmsg_payload(
        o: *mut io_uring_recvmsg_out,
        msgh: *mut msghdr,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn io_uring_recvmsg_payload_length(
        o: *mut io_uring_recvmsg_out,
        buf_len: ::std::os::raw::c_int,
        msgh: *mut msghdr,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn io_uring_prep_openat2(
        sqe: *mut io_uring_sqe,
        dfd: ::std::os::raw::c_int,
        path: *const ::std::os::raw::c_char,
        how: *mut open_how,
    );
}
extern "C" {
    pub fn io_uring_prep_openat2_direct(
        sqe: *mut io_uring_sqe,
        dfd: ::std::os::raw::c_int,
        path: *const ::std::os::raw::c_char,
        how: *mut open_how,
        file_index: ::std::os::raw::c_uint,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct epoll_event {
    _unused: [u8; 0],
}
extern "C" {
    pub fn io_uring_prep_epoll_ctl(
        sqe: *mut io_uring_sqe,
        epfd: ::std::os::raw::c_int,
        fd: ::std::os::raw::c_int,
        op: ::std::os::raw::c_int,
        ev: *mut epoll_event,
    );
}
extern "C" {
    pub fn io_uring_prep_provide_buffers(
        sqe: *mut io_uring_sqe,
        addr: *mut ::std::os::raw::c_void,
        len: ::std::os::raw::c_int,
        nr: ::std::os::raw::c_int,
        bgid: ::std::os::raw::c_int,
        bid: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn io_uring_prep_remove_buffers(
        sqe: *mut io_uring_sqe,
        nr: ::std::os::raw::c_int,
        bgid: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn io_uring_prep_shutdown(
        sqe: *mut io_uring_sqe,
        fd: ::std::os::raw::c_int,
        how: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn io_uring_prep_unlinkat(
        sqe: *mut io_uring_sqe,
        dfd: ::std::os::raw::c_int,
        path: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn io_uring_prep_unlink(
        sqe: *mut io_uring_sqe,
        path: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn io_uring_prep_renameat(
        sqe: *mut io_uring_sqe,
        olddfd: ::std::os::raw::c_int,
        oldpath: *const ::std::os::raw::c_char,
        newdfd: ::std::os::raw::c_int,
        newpath: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn io_uring_prep_rename(
        sqe: *mut io_uring_sqe,
        oldpath: *const ::std::os::raw::c_char,
        newpath: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn io_uring_prep_sync_file_range(
        sqe: *mut io_uring_sqe,
        fd: ::std::os::raw::c_int,
        len: ::std::os::raw::c_uint,
        offset: __u64,
        flags: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn io_uring_prep_mkdirat(
        sqe: *mut io_uring_sqe,
        dfd: ::std::os::raw::c_int,
        path: *const ::std::os::raw::c_char,
        mode: mode_t,
    );
}
extern "C" {
    pub fn io_uring_prep_mkdir(
        sqe: *mut io_uring_sqe,
        path: *const ::std::os::raw::c_char,
        mode: mode_t,
    );
}
extern "C" {
    pub fn io_uring_prep_symlinkat(
        sqe: *mut io_uring_sqe,
        target: *const ::std::os::raw::c_char,
        newdirfd: ::std::os::raw::c_int,
        linkpath: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn io_uring_prep_symlink(
        sqe: *mut io_uring_sqe,
        target: *const ::std::os::raw::c_char,
        linkpath: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn io_uring_prep_linkat(
        sqe: *mut io_uring_sqe,
        olddfd: ::std::os::raw::c_int,
        oldpath: *const ::std::os::raw::c_char,
        newdfd: ::std::os::raw::c_int,
        newpath: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn io_uring_prep_link(
        sqe: *mut io_uring_sqe,
        oldpath: *const ::std::os::raw::c_char,
        newpath: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn io_uring_prep_msg_ring_cqe_flags(
        sqe: *mut io_uring_sqe,
        fd: ::std::os::raw::c_int,
        len: ::std::os::raw::c_uint,
        data: __u64,
        flags: ::std::os::raw::c_uint,
        cqe_flags: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn io_uring_prep_msg_ring(
        sqe: *mut io_uring_sqe,
        fd: ::std::os::raw::c_int,
        len: ::std::os::raw::c_uint,
        data: __u64,
        flags: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn io_uring_prep_msg_ring_fd(
        sqe: *mut io_uring_sqe,
        fd: ::std::os::raw::c_int,
        source_fd: ::std::os::raw::c_int,
        target_fd: ::std::os::raw::c_int,
        data: __u64,
        flags: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn io_uring_prep_msg_ring_fd_alloc(
        sqe: *mut io_uring_sqe,
        fd: ::std::os::raw::c_int,
        source_fd: ::std::os::raw::c_int,
        data: __u64,
        flags: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn io_uring_prep_getxattr(
        sqe: *mut io_uring_sqe,
        name: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_char,
        path: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn io_uring_prep_setxattr(
        sqe: *mut io_uring_sqe,
        name: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
        path: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
        len: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn io_uring_prep_fgetxattr(
        sqe: *mut io_uring_sqe,
        fd: ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_char,
        len: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn io_uring_prep_fsetxattr(
        sqe: *mut io_uring_sqe,
        fd: ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
        len: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn io_uring_prep_socket(
        sqe: *mut io_uring_sqe,
        domain: ::std::os::raw::c_int,
        type_: ::std::os::raw::c_int,
        protocol: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn io_uring_prep_socket_direct(
        sqe: *mut io_uring_sqe,
        domain: ::std::os::raw::c_int,
        type_: ::std::os::raw::c_int,
        protocol: ::std::os::raw::c_int,
        file_index: ::std::os::raw::c_uint,
        flags: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn io_uring_prep_socket_direct_alloc(
        sqe: *mut io_uring_sqe,
        domain: ::std::os::raw::c_int,
        type_: ::std::os::raw::c_int,
        protocol: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn io_uring_prep_cmd_sock(
        sqe: *mut io_uring_sqe,
        cmd_op: ::std::os::raw::c_int,
        fd: ::std::os::raw::c_int,
        level: ::std::os::raw::c_int,
        optname: ::std::os::raw::c_int,
        optval: *mut ::std::os::raw::c_void,
        optlen: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn io_uring_prep_waitid(
        sqe: *mut io_uring_sqe,
        idtype: idtype_t,
        id: id_t,
        infop: *mut siginfo_t,
        options: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn io_uring_prep_futex_wake(
        sqe: *mut io_uring_sqe,
        futex: *mut u32,
        val: u64,
        mask: u64,
        futex_flags: u32,
        flags: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn io_uring_prep_futex_wait(
        sqe: *mut io_uring_sqe,
        futex: *mut u32,
        val: u64,
        mask: u64,
        futex_flags: u32,
        flags: ::std::os::raw::c_uint,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct futex_waitv {
    _unused: [u8; 0],
}
extern "C" {
    pub fn io_uring_prep_futex_waitv(
        sqe: *mut io_uring_sqe,
        futex: *mut futex_waitv,
        nr_futex: u32,
        flags: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn io_uring_sq_ready(ring: *const io_uring) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn io_uring_sq_space_left(ring: *const io_uring) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn io_uring_sqring_wait(ring: *mut io_uring) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn io_uring_cq_ready(ring: *const io_uring) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn io_uring_cq_has_overflow(ring: *const io_uring) -> bool;
}
extern "C" {
    pub fn io_uring_cq_eventfd_enabled(ring: *const io_uring) -> bool;
}
extern "C" {
    pub fn io_uring_cq_eventfd_toggle(ring: *mut io_uring, enabled: bool) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn io_uring_wait_cqe_nr(
        ring: *mut io_uring,
        cqe_ptr: *mut *mut io_uring_cqe,
        wait_nr: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __io_uring_peek_cqe(
        ring: *mut io_uring,
        cqe_ptr: *mut *mut io_uring_cqe,
        nr_available: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn io_uring_peek_cqe(
        ring: *mut io_uring,
        cqe_ptr: *mut *mut io_uring_cqe,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn io_uring_wait_cqe(
        ring: *mut io_uring,
        cqe_ptr: *mut *mut io_uring_cqe,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn io_uring_buf_ring_mask(ring_entries: __u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn io_uring_buf_ring_init(br: *mut io_uring_buf_ring);
}
extern "C" {
    pub fn io_uring_buf_ring_add(
        br: *mut io_uring_buf_ring,
        addr: *mut ::std::os::raw::c_void,
        len: ::std::os::raw::c_uint,
        bid: ::std::os::raw::c_ushort,
        mask: ::std::os::raw::c_int,
        buf_offset: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn io_uring_buf_ring_advance(br: *mut io_uring_buf_ring, count: ::std::os::raw::c_int);
}
extern "C" {
    pub fn __io_uring_buf_ring_cq_advance(
        ring: *mut io_uring,
        br: *mut io_uring_buf_ring,
        cq_count: ::std::os::raw::c_int,
        buf_count: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn io_uring_buf_ring_cq_advance(
        ring: *mut io_uring,
        br: *mut io_uring_buf_ring,
        count: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn io_uring_get_sqe(ring: *mut io_uring) -> *mut io_uring_sqe;
}
extern "C" {
    pub fn io_uring_mlock_size(
        entries: ::std::os::raw::c_uint,
        flags: ::std::os::raw::c_uint,
    ) -> isize;
}
extern "C" {
    pub fn io_uring_mlock_size_params(
        entries: ::std::os::raw::c_uint,
        p: *mut io_uring_params,
    ) -> isize;
}
extern "C" {
    pub fn io_uring_major_version() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn io_uring_minor_version() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn io_uring_check_version(
        major: ::std::os::raw::c_int,
        minor: ::std::os::raw::c_int,
    ) -> bool;
}
